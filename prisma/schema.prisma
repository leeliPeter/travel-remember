// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}
generator client {
  provider = "prisma-client-js"
}
enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  password      String?
  role          Role      @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  trips         UserTrip[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model VerificationToken {
    id                 String  @id @default(cuid())
    email              String
    token              String @unique
    expires             DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id                 String  @id @default(cuid())
    email              String
    token              String @unique
    expires             DateTime

    @@unique([email, token])
}

model TwoFactorToken{
    id                 String  @id @default(cuid())
    email              String
    token              String @unique
    expires             DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation{
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Trip {
  id          String    @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       UserTrip[]
  lists       List[]    // One trip can have many lists
  schedule    Schedule?

  @@map("trips")
}

model List {
  id          String     @id @default(cuid())
  name        String
  tripId      String
  trip        Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  locations   Location[] // One list can have many locations
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([tripId])
}

model Location {
  id            String         @id @default(cuid())
  name          String
  address       String
  lat           Float
  lng           Float
  photoUrl      String?
  listId        String
  list          List          @relation(fields: [listId], references: [id], onDelete: Cascade)
  locationPlans LocationPlan[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([listId])
}

model UserTrip {
  id        String   @id @default(cuid())
  userId    String
  tripId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tripId])
  @@index([userId])
  @@index([tripId])
}

model Schedule {
  id          String        @id @default(cuid())
  tripId      String        @unique
  trip        Trip          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  days        DaySchedule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      String?       // e.g., "draft", "published"
  version     Int          @default(1) // For tracking changes

  @@index([tripId])
}

model DaySchedule {
  id          String         @id @default(cuid())
  date        DateTime
  scheduleId  String
  schedule    Schedule       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  plans       LocationPlan[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime      @updatedAt
  dayOrder    Int           // To maintain day order
  notes       String?       // Optional notes for the day

  @@index([scheduleId])
  @@unique([scheduleId, dayOrder]) // Ensure unique order within schedule
}

model LocationPlan {
  id            String      @id @default(cuid())
  locationId    String
  location      Location    @relation(fields: [locationId], references: [id])
  dayScheduleId String
  daySchedule   DaySchedule @relation(fields: [dayScheduleId], references: [id], onDelete: Cascade)
  arrivalTime   DateTime?   
  departureTime DateTime?   
  commuteTime   Int?        // in minutes
  planOrder     Int         // To maintain location order within day
  notes         String?     // Optional notes for the location
  status        String?     // e.g., "confirmed", "tentative"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([locationId])
  @@index([dayScheduleId])
  @@unique([dayScheduleId, planOrder]) // Ensure unique order within day
}







